package services

import (
	"CVSeeker/cmd/CVSeeker/internal/cfg"
	"CVSeeker/internal/ginLogger"
	"CVSeeker/internal/meta"
	"CVSeeker/internal/models"
	"CVSeeker/internal/repositories"
	"CVSeeker/pkg/db"
	"CVSeeker/pkg/elasticsearch"
	"CVSeeker/pkg/gpt"
	"fmt"
	"github.com/gin-gonic/gin"
	"github.com/spf13/viper"
	"go.uber.org/dig"
	"strings"
)

type IDataProcessingService interface {
	ProcessData(c *gin.Context, fullText string, file []byte) (*meta.BasicResponse, error)
}

type DataProcessingService struct {
	db            *db.DB
	gptClient     gpt.IGptAdaptorClient
	resumeRepo    repositories.IResumeRepository
	elasticClient elasticsearch.ElasticsearchClient
}

type DataProcessingServiceArgs struct {
	dig.In
	DB            *db.DB `name:"talentAcquisitionDB"`
	GptClient     gpt.IGptAdaptorClient
	ResumeRepo    repositories.IResumeRepository
	ElasticClient elasticsearch.ElasticsearchClient
}

func NewDataProcessingService(args DataProcessingServiceArgs) IDataProcessingService {
	return &DataProcessingService{
		db:            args.DB,
		gptClient:     args.GptClient,
		resumeRepo:    args.ResumeRepo,
		elasticClient: args.ElasticClient,
	}
}

func (_this *DataProcessingService) ProcessData(c *gin.Context, fullText string, file []byte) (*meta.BasicResponse, error) {
	prompt := generatePrompt(fullText)
	model := viper.GetString(cfg.ChatGptModel)
	mockEmbedding := []float64{-0.06770564615726471, -0.023198239505290985, 0.00826052762567997, 0.018814340233802795, -0.014398112893104553, -0.08304665982723236, 0.005448027513921261, -0.015521690249443054, -0.04621513560414314, 0.01616906374692917, -0.09542030096054077, -0.07212793827056885, 0.03720852732658386, -0.0002678291639313102, 0.02593747340142727, 0.021089080721139908, 0.01293003000319004, -0.07282553613185883, -0.02277701534330845, -0.12403174489736557, -0.03574492782354355, -0.03682377561926842, -0.014979347586631775, -0.09251157939434052, -0.0010379096493124962, -0.011091014370322227, 0.04307966306805611, 0.016841862350702286, -0.03989067301154137, -0.06106683611869812, -0.06381268799304962, 0.03756462410092354, -0.009150209836661816, 0.03192124143242836, 0.04148492589592934, 0.1259155422449112, 0.04047388955950737, -0.037319615483284, -0.022070523351430893, -0.007169909775257111, -0.05509362369775772, -0.0372324176132679, -0.021078789606690407, -0.0740964338183403, -0.025099346414208412, -0.060974109917879105, -0.05508623272180557, -0.09482225775718689, -0.018465837463736534, 0.01851692423224449, -0.006807648576796055, -0.08731681853532791, 0.06651856005191803, 0.015511643141508102, 0.022268755361437798, 0.026693440973758698, 0.07931321859359741, 0.008552768267691135, 0.006547962781041861, -0.05804916471242905, 0.03970320150256157, 0.003823483595624566, -0.035880520939826965, 0.020953642204403877, -0.06543079763650894, -0.05887999013066292, -0.005566233303397894, 0.03613290190696716, 0.005510034039616585, -0.09323886036872864, -0.08945994824171066, -0.04602072015404701, -0.047796688973903656, 0.017390690743923187, 0.018072014674544334, 0.024509247392416, 0.09179285913705826, -0.002383728511631489, 0.08058538287878036, -0.04812488704919815, 0.007473416160792112, 0.04649168998003006, -0.16379395127296448, 0.0765540674328804, -0.1303286999464035, 0.036231543868780136, -0.020309042185544968, 0.10324906557798386, 0.05316593870520592, 0.10197422653436661, 0.014767062850296497, -0.019259663298726082, 0.02419918403029442, -0.005460221320390701, 0.002602027030661702, -0.01683424785733223, 0.07164064049720764, -0.0126658258959651, -0.03209022805094719, 0.030598541721701622, 0.022962136194109917, 0.04741635173559189, 0.05044225603342056, 0.01141754537820816, -0.042936455458402634, 0.060974735766649246, -0.09972931444644928, 0.06939595192670822, 0.04384883865714073, -0.0016800417797639966, -0.04152069613337517, -0.0005906029255129397, -0.07686008512973785, -0.011522113345563412, -0.0015300448285415769, 0.011441369540989399, -0.07255133986473083, 0.06692618131637573, 0.041389115154743195, -0.021861998364329338, 0.07094232738018036, 0.05235026404261589, -0.06319598108530045, -0.06161335110664368, 0.041857048869132996, 0.03364957123994827, -0.029911009594798088, 2.3427969753872822e-33, 0.08171634376049042, -0.014532371424138546, -0.029976140707731247, 0.0397990457713604, 0.04120175167918205, -0.0027583863120526075, 0.021578926593065262, 0.10245892405509949, -0.07758999615907669, -0.042411819100379944, -0.06988070160150528, 0.0512874536216259, -0.004142303019762039, -0.005266227759420872, -0.020199384540319443, -0.025421012192964554, 0.00538135739043355, 0.028631359338760376, -0.052698422223329544, 0.07531049847602844, 0.024563753977417946, -0.12381390482187271, -0.054622940719127655, 0.060329869389534, 0.07462126016616821, -0.04393760859966278, 0.06411653757095337, 0.014794032089412212, 0.034434568136930466, 0.04109795391559601, -0.0547574944794178, 0.06931091099977493, -0.0470142625272274, 0.031228531152009964, 0.015890348702669144, -0.019789688289165497, -0.029885048046708107, -0.05546044930815697, -0.002045001368969679, 0.008051355369389057, -0.033938612788915634, 0.003429028205573559, 0.008030548691749573, -0.03596104681491852, 0.004629777278751135, -0.02168901078402996, 0.08639214187860489, -0.025759072974324226, 0.10131031274795532, 0.023695241659879684, -0.06306556612253189, 0.021229760721325874, 0.12461405247449875, 0.0026233044918626547, 0.07055319100618362, 0.02113148756325245, 0.08979656547307968, -0.03038080409169197, -0.03340931981801987, 0.04196882247924805, -0.10211680829524994, 0.07442368566989899, -0.040798407047986984, 0.03712926432490349, 0.019654959440231323, -0.05994446948170662, 0.06306251138448715, 0.04724089428782463, 0.05800639092922211, 0.04509471729397774, -0.04648122191429138, 0.026414480060338974, 0.09927554428577423, 0.012629186734557152, -0.08017435669898987, -0.03475617244839668, -0.01886407658457756, 0.006703306455165148, 0.0027990597300231457, 0.052963849157094955, -0.04313766956329346, 0.04097626358270645, -0.03272790089249611, -0.04611920192837715, 0.025839338079094887, 0.04714859277009964, -0.0004684710002038628, 0.02430516481399536, 0.00328446296043694, 0.01083143800497055, -0.012923569418489933, -0.0365610271692276, -0.015191406011581421, -0.00422681076452136, -0.05240761488676071, -4.8150944899848095e-33, -0.043140292167663574, -0.015480722300708294, -0.10159184038639069, 0.014682825654745102, 0.0869758278131485, -0.07661783695220947, 0.04411450773477554, 0.01192937046289444, -0.016830530017614365, -0.04472585394978523, -0.014373076148331165, 0.015281557105481625, 0.01457829587161541, -0.015788421034812927, -0.02859894372522831, -0.019897550344467163, -0.04809720814228058, -0.10033928602933884, 0.002949983812868595, 0.013559093698859215, 0.02430644817650318, 0.021778829395771027, 0.013087076134979725, -0.014572879299521446, 0.05161968991160393, -0.0624617300927639, -0.02599160000681877, 0.025616953149437904, -0.040659233927726746, 0.019074318930506706, 0.11436602473258972, 0.024400847032666206, -0.05677501857280731, 0.02687842771410942, -0.012973364442586899, -0.06563536077737808, 0.04162738844752312, 0.026892876252532005, 0.02448762208223343, 0.0020614496897906065, 0.06514840573072433, -0.04320807754993439, -0.033386193215847015, 0.0333012118935585, -0.02427693083882332, 0.05740853399038315, -0.04963304474949837, 0.041888948529958725, -0.05128296837210655, -0.06354890763759613, -0.029263706877827644, 0.03830123320221901, 0.0017547707539051771, 0.00018587517843116075, 0.02497001737356186, -0.0389537550508976, 0.03524766489863396, 0.011724522337317467, -0.058582473546266556, 0.04854132980108261, 0.017228566110134125, -0.03870405629277229, 0.15764418244361877, 0.04067103564739227, -0.014597373083233833, 0.0006969326641410589, 0.03468649089336395, 0.024144712835550308, -0.09839309751987457, -0.02121799811720848, 0.03805785998702049, -0.006018923129886389, -0.06142474710941315, -0.043790847063064575, 0.0016500932397320867, -0.07569501549005508, -0.11420394480228424, -0.13447336852550507, -0.0659312829375267, 0.019022999331355095, -0.019010405987501144, 0.0471256859600544, 0.013279624283313751, 0.0848480761051178, -0.030950816348195076, 0.06764575093984604, -0.05154351145029068, 0.03529006987810135, 0.027055952697992325, -0.04300335422158241, -0.13076072931289673, 0.022172367200255394, -0.07330917567014694, 0.01417066715657711, -0.06504276394844055, -5.434644023694091e-8, -0.0033332835882902145, 0.009840351529419422, -0.056551627814769745, -0.003454968798905611, -0.00319224433042109, 0.03619451820850372, -0.046275392174720764, 0.0594606027007103, 0.06311409920454025, 0.017312882468104362, -0.03728216886520386, -0.06910821795463562, -0.012136186473071575, 0.06704676151275635, 0.10294727981090546, -0.0018351476173847914, 0.05261671915650368, 0.1416916698217392, -0.04498811438679695, -0.07492103427648544, 0.08538611978292465, 0.02786354161798954, -0.02715938352048397, 0.03529040887951851, -0.008115987293422222, 0.0025133711751550436, 0.0035308608785271645, 0.013058753684163094, 0.017142800614237785, 0.0045261322520673275, -0.013996843248605728, -0.005767005495727062, 0.01999327354133129, -0.007661299780011177, 0.07691977918148041, -0.034417230635881424, 0.011829636991024017, -0.03959161043167114, 0.003950107842683792, 0.010701718740165234, -0.024464499205350876, 0.0712575912475586, -0.04010285809636116, 0.030789900571107864, -0.03301754966378212, -0.021891571581363678, -0.08415329456329346, -0.011262914165854454, -0.045605581253767014, -0.014004060067236423, 0.010820805095136166, -0.03221219405531883, -0.02497657760977745, 0.0813392624258995, 0.10221992433071136, 0.039566829800605774, 0.015408119186758995, -0.08064337819814682, 0.07561999559402466, 0.12409501522779465, -0.004571912344545126, -0.019859900698065758, 0.028565075248479843, -0.018896427005529404}
	mockDownloadLink := "http://example.com/mockresume.pdf"

	// Summarize resume text by making request to OpenAI
	responseText, err := _this.gptClient.AskGPT(prompt, model)
	if err != nil {
		ginLogger.Gin(c).Errorf("failed to summarize using GPT: %v", err)
		return nil, err
	}

	// Prepare resume for database
	resume := &models.Resume{
		FullText:     fullText,
		DownloadLink: mockDownloadLink,
	}

	// Create resume in database
	databaseResume, err := _this.resumeRepo.Create(_this.db, resume)
	if err != nil {
		ginLogger.Gin(c).Errorf("failed to create resume record: %v", err)
		return nil, err
	}

	// Prepare document for Elasticsearch, including the database resumeId
	elkResume := map[string]interface{}{
		"content":   responseText,
		"embedding": mockEmbedding,
		"url":       databaseResume.DownloadLink,
	}

	// Index resume in Elasticsearch
	err = _this.elasticClient.AddDocument(c, viper.GetString(cfg.ElasticsearchDocumentIndex), fmt.Sprintf("%d", databaseResume.ResumeId), elkResume)
	if err != nil {
		ginLogger.Gin(c).Errorf("failed to upload resume data to Elasticsearch: %v", err)
		return nil, err
	}

	response := &meta.BasicResponse{
		Meta: meta.Meta{
			Code:    200,
			Message: "Resume processed and file uploaded successfully",
		},
		Data: responseText,
	}

	return response, nil
}

func generatePrompt(fullText string) string {
	var sb strings.Builder
	sb.WriteString("Given the full text of a resume below, please perform a detailed summary focusing on essential information that will be used for text embedding models aimed at similarity matching with job descriptions. Output the summary in a structured and concise format suitable for embedding, which includes the following sections:\n\n")
	sb.WriteString(fmt.Sprintf("Full text of the resume:\n%s\n\n", fullText))
	sb.WriteString("Summary should include sections on these, you MUST NOT MAKE UP ANY INFORMATION, do not add the section if there is no content related:\n")
	sb.WriteString("1. Header: Candidate's full name, email address, phone number, and any professional online profiles such as LinkedIn or GitHub.\n")
	sb.WriteString("2. Summary: Concise professional summary or objective encapsulating the candidate’s career goals and main qualifications.\n")
	sb.WriteString("3. Education: Each educational qualification including the degree, institution, year of graduation, and any honors or special recognitions.\n")
	sb.WriteString("4. Work Experience:\n    * Include for each job the employer, job title, dates of employment, and a bulleted list of key responsibilities and significant achievements.\n")
	sb.WriteString("5. Skills: List all relevant technical and soft skills, specific technologies or tools, formatted as a comma-separated list.\n")
	sb.WriteString("6. Certifications: Any relevant certifications with the name, issuing organization, and date of certification.\n")
	sb.WriteString("7. Projects: Significant projects including title, brief description, technologies used, and project's impact or outcome.\n")
	sb.WriteString("8. Publications: Any publications including title, co-authors, publication venue, and publication date.\n")
	sb.WriteString("9. Languages: Languages known along with proficiency level (e.g., fluent, intermediate).\n")
	sb.WriteString("10. Professional Affiliations: Memberships or roles in professional organizations, including the organization name, role nature, and dates of involvement.\n")
	return sb.String()
}
